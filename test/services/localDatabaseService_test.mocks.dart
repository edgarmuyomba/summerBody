// Mocks generated by Mockito 5.4.4 from annotations
// in summerbody/test/services/localDatabaseService_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i6;
import 'package:summerbody/database/daos/EntryDao.dart' as _i2;
import 'package:summerbody/database/daos/MuscleGroupDao.dart' as _i4;
import 'package:summerbody/database/daos/WorkoutDao.dart' as _i3;
import 'package:summerbody/database/database.dart' as _i7;
import 'package:summerbody/database/tables/Entry.dart' as _i10;
import 'package:summerbody/database/tables/MuscleGroup.dart' as _i8;
import 'package:summerbody/database/tables/Workout.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEntryDao_0 extends _i1.SmartFake implements _i2.EntryDao {
  _FakeEntryDao_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkoutDao_1 extends _i1.SmartFake implements _i3.WorkoutDao {
  _FakeWorkoutDao_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMuscleGroupDao_2 extends _i1.SmartFake
    implements _i4.MuscleGroupDao {
  _FakeMuscleGroupDao_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_3<T> extends _i1.SmartFake
    implements _i5.StreamController<T> {
  _FakeStreamController_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_4 extends _i1.SmartFake
    implements _i6.DatabaseExecutor {
  _FakeDatabaseExecutor_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i7.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EntryDao get entryDao => (super.noSuchMethod(
        Invocation.getter(#entryDao),
        returnValue: _FakeEntryDao_0(
          this,
          Invocation.getter(#entryDao),
        ),
      ) as _i2.EntryDao);

  @override
  _i3.WorkoutDao get workoutDao => (super.noSuchMethod(
        Invocation.getter(#workoutDao),
        returnValue: _FakeWorkoutDao_1(
          this,
          Invocation.getter(#workoutDao),
        ),
      ) as _i3.WorkoutDao);

  @override
  _i4.MuscleGroupDao get muscleGroupDao => (super.noSuchMethod(
        Invocation.getter(#muscleGroupDao),
        returnValue: _FakeMuscleGroupDao_2(
          this,
          Invocation.getter(#muscleGroupDao),
        ),
      ) as _i4.MuscleGroupDao);

  @override
  _i5.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_3<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i5.StreamController<String>);

  @override
  set changeListener(_i5.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_4(
          this,
          Invocation.getter(#database),
        ),
      ) as _i6.DatabaseExecutor);

  @override
  set database(_i6.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [MuscleGroupDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMuscleGroupDao extends _i1.Mock implements _i4.MuscleGroupDao {
  MockMuscleGroupDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.MuscleGroup>> getAllMuscleGroups() => (super.noSuchMethod(
        Invocation.method(
          #getAllMuscleGroups,
          [],
        ),
        returnValue:
            _i5.Future<List<_i8.MuscleGroup>>.value(<_i8.MuscleGroup>[]),
      ) as _i5.Future<List<_i8.MuscleGroup>>);

  @override
  _i5.Future<_i8.MuscleGroup?> getMuscleGroupById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMuscleGroupById,
          [id],
        ),
        returnValue: _i5.Future<_i8.MuscleGroup?>.value(),
      ) as _i5.Future<_i8.MuscleGroup?>);

  @override
  _i5.Future<List<_i8.MuscleGroup>> getMuscleGroupsByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMuscleGroupsByName,
          [name],
        ),
        returnValue:
            _i5.Future<List<_i8.MuscleGroup>>.value(<_i8.MuscleGroup>[]),
      ) as _i5.Future<List<_i8.MuscleGroup>>);

  @override
  _i5.Future<List<_i8.MuscleGroup>> getMuscleGroupsByDay(String? day) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMuscleGroupsByDay,
          [day],
        ),
        returnValue:
            _i5.Future<List<_i8.MuscleGroup>>.value(<_i8.MuscleGroup>[]),
      ) as _i5.Future<List<_i8.MuscleGroup>>);

  @override
  _i5.Future<void> editMuscleGroup(_i8.MuscleGroup? muscleGroup) =>
      (super.noSuchMethod(
        Invocation.method(
          #editMuscleGroup,
          [muscleGroup],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateMuscleGroupDay(
    int? id,
    String? day,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMuscleGroupDay,
          [
            id,
            day,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> createMuscleGroup(_i8.MuscleGroup? muscleGroup) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMuscleGroup,
          [muscleGroup],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}

/// A class which mocks [WorkoutDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutDao extends _i1.Mock implements _i3.WorkoutDao {
  MockWorkoutDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<int> createWorkout(_i9.Workout? workout) => (super.noSuchMethod(
        Invocation.method(
          #createWorkout,
          [workout],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> editWorkout(_i9.Workout? workout) => (super.noSuchMethod(
        Invocation.method(
          #editWorkout,
          [workout],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteWorkoutById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteWorkoutById,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i9.Workout?> getWorkoutById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getWorkoutById,
          [id],
        ),
        returnValue: _i5.Future<_i9.Workout?>.value(),
      ) as _i5.Future<_i9.Workout?>);

  @override
  _i5.Future<List<_i9.Workout>> getWorkoutsByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkoutsByName,
          [name],
        ),
        returnValue: _i5.Future<List<_i9.Workout>>.value(<_i9.Workout>[]),
      ) as _i5.Future<List<_i9.Workout>>);

  @override
  _i5.Future<List<_i9.Workout>> getWorkoutsByMuscleGroup(int? muscleGroupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWorkoutsByMuscleGroup,
          [muscleGroupId],
        ),
        returnValue: _i5.Future<List<_i9.Workout>>.value(<_i9.Workout>[]),
      ) as _i5.Future<List<_i9.Workout>>);

  @override
  _i5.Future<List<_i9.Workout>> getAllWorkouts() => (super.noSuchMethod(
        Invocation.method(
          #getAllWorkouts,
          [],
        ),
        returnValue: _i5.Future<List<_i9.Workout>>.value(<_i9.Workout>[]),
      ) as _i5.Future<List<_i9.Workout>>);
}

/// A class which mocks [EntryDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntryDao extends _i1.Mock implements _i2.EntryDao {
  MockEntryDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<int> createEntry(_i10.Entry? entry) => (super.noSuchMethod(
        Invocation.method(
          #createEntry,
          [entry],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> editEntry(_i10.Entry? entry) => (super.noSuchMethod(
        Invocation.method(
          #editEntry,
          [entry],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i10.Entry>> getAllEntries() => (super.noSuchMethod(
        Invocation.method(
          #getAllEntries,
          [],
        ),
        returnValue: _i5.Future<List<_i10.Entry>>.value(<_i10.Entry>[]),
      ) as _i5.Future<List<_i10.Entry>>);

  @override
  _i5.Future<void> deleteEntryById(
    int? workoutId,
    int? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteEntryById,
          [
            workoutId,
            id,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i10.Entry?> getEntryById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getEntryById,
          [id],
        ),
        returnValue: _i5.Future<_i10.Entry?>.value(),
      ) as _i5.Future<_i10.Entry?>);

  @override
  _i5.Future<List<_i10.Entry>> getEntriesByWorkoutId(int? workoutId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEntriesByWorkoutId,
          [workoutId],
        ),
        returnValue: _i5.Future<List<_i10.Entry>>.value(<_i10.Entry>[]),
      ) as _i5.Future<List<_i10.Entry>>);
}
